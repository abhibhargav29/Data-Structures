#Graph_Implemented

9.0)We have implemented a weighted undirected graph using adjacency list representation. We have add edge, remove edge, BFS, DFS, cycle detection, shortest path and
minimum spanning tree methods in the class itself. We use list of list for adjacency list. The number of vertices can't be changed and are given in the starting.
--We have two BFS functions and similarly two DFS functions.
--One is for simple traversal from a given source and it prints all nodes directly or indirectly reachable from it.
--Another one takes in just the graph and prints all nodes (all the disconneted components as well). It also tells the number of components in graph.
--Cycle detection is based on DFS and returns boolean value.
--We have Dijikstra's algorithm implemented using min heap which is imported from another file named "ModifiedHeap".
--We also have Bellman ford algorithm for shortest path which works for negative weights and detects negative weight cycle as well.
--Prims algotithm is used for MST and it also uses min heap.
It assumes lowest numbered node as the source for a component and prints DFS/BFS accordingly.

9.1)We have implemented a weighted directed graph using adjacency list representation. We have add edge, remove edge, Topological sort, cycle detection, shortest path, 
reverse graph and Kosaeraju's algorithm methods in the class itself.
--The cycle dteect is implemented using DFS nad BFS both.
--For topological sort, absence of cycle is necessary, so we have an initial check for that. Topological sort is also implemented in bfs and dfs both.
--The shortest path algo is only for DAG.
--Reverse graph reverses each edge of the graph and stores it in a new graph which it returns
--dfs traversal is used for kosaraju ago.
--We use kosaraju algo for strongly connected components. Strong components are defined for a directed graph as grp of nodes that are all reachable from each other. This method
  prints these components seperated by line.

9.2)The modified min heap takes in two values for each entry, one the distance and second the vertex number, the heap is made on the basis of distance.
The vertex is used to recognize it using a hashtable "pos" that stores position of each vertex to later retireve in O(1) tinme. The file here is saved as 
"9.2)ModifiedHeap.py" but thats just to maintain order and on system "9.2)" needs to be removed as it will cause syntax error.

9.3)Disjoin Set data structure is not implemented as graph but it is useful in kruskal algorithm and in representing relationships like friends to find
size of largest group.
